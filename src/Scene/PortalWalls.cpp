//----------------------------------------------------------------------------------------
/**
 * \file       PortalWalls.cpp
 * \author     Richard Kvasnica
 * \brief      Model child class, portal walls definition
*/
//----------------------------------------------------------------------------------------

#include "PortalWalls.hpp"

#include <assimp/material.h>

namespace kvasnric
{
	PortalWalls::PortalWalls(std::shared_ptr<Texture2D> diffuse, std::shared_ptr<Texture2D> specular, std::shared_ptr<Texture2D> normal, std::shared_ptr<Texture2D> rough, std::shared_ptr<Texture2D> ao)
	{
		auto mesh = Mesh();
		const int vertCnt = 52;

		const float verts[vertCnt * 11] = { // positions, normals, texcoords, tangents
			15.500009f, 0.000001f, -20.452114f, -1.000000f, 0.000000f, -0.000000f, -0.000547f, 1.925415f, 0.000000f, 0.000000f, 1.000000f,
			15.500010f, 0.000001f, -26.186888f, -1.000000f, 0.000000f, -0.000000f, -3.555781f, 1.925414f, 0.000000f, 0.000000f, 1.000000f,
			15.500009f, 1.551259f, -20.452114f, -1.000000f, 0.000000f, -0.000000f, -0.000547f, 1.008231f, 0.000000f, 0.000000f, 1.000000f,
			15.500010f, 3.000001f, -26.186888f, -1.000000f, 0.000000f, -0.000000f, -3.555781f, 0.151661f, 0.000000f, -0.000000f, 1.000000f,
			15.500009f, 3.000001f, -20.452114f, -1.000000f, 0.000000f, -0.000000f, -0.000547f, 0.151661f, 0.000000f, 0.000000f, 1.000000f,
			15.500004f, 1.551259f, -6.186888f, -1.000000f, 0.000000f, -0.000000f, 8.843085f, 1.008233f, 0.000000f, -0.000000f, 1.000000f,
			15.500004f, 3.751259f, -6.186888f, -1.000000f, 0.000000f, -0.000000f, 8.843085f, -0.292520f, 0.000000f, 0.000000f, 1.000000f,
			15.500003f, 5.000001f, -2.186888f, -1.000000f, 0.000000f, -0.000000f, 11.322858f, -1.030841f, 0.000000f, -0.000000f, 1.000000f,
			15.500004f, 5.000001f, -6.186888f, -1.000000f, 0.000000f, -0.000000f, 8.843085f, -1.030842f, 0.000000f, 0.000000f, 1.000000f,
			15.500004f, -0.999999f, -6.186888f, -1.000000f, 0.000000f, -0.000000f, 8.843085f, 2.516666f, 0.000000f, 0.000000f, 1.000000f,
			15.500003f, -0.999999f, -2.186888f, -1.000000f, 0.000000f, -0.000000f, 11.322858f, 2.516666f, 0.000000f, -0.000000f, 1.000000f,
			15.500009f, 3.751259f, -20.452114f, -1.000000f, 0.000000f, -0.000000f, -0.000547f, -0.292521f, 0.000000f, 0.000000f, 1.000000f,
			-7.499998f, 2.500001f, -4.000003f, 0.000000f, 1.000000f, -0.000000f, 0.758119f, 0.023588f, 1.000000f, 0.000000f, 0.000001f,
			-7.499999f, 2.500001f, -0.000003f, 0.000000f, 1.000000f, -0.000000f, 0.758119f, 0.164000f, 1.000000f, 0.000000f, 0.000001f,
			-8.499998f, 2.500001f, -4.000004f, 0.000000f, 1.000000f, -0.000000f, 0.724640f, 0.023588f, 1.000000f, 0.000000f, 0.000001f,
			-8.499999f, 2.500001f, -0.000004f, 0.000000f, 1.000000f, -0.000000f, 0.724640f, 0.164000f, 1.000000f, 0.000000f, 0.000001f,
			-8.499998f, -0.999999f, -4.000004f, 0.000000f, -1.000000f, -0.000000f, 0.723636f, 0.023038f, -1.000000f, 0.000000f, -0.000001f,
			-8.499999f, -0.999999f, -0.000004f, 0.000000f, -1.000000f, -0.000000f, 0.723636f, 0.163450f, -1.000000f, 0.000000f, -0.000001f,
			-7.499998f, -0.999999f, -4.000003f, 0.000000f, -1.000000f, -0.000000f, 0.690157f, 0.023038f, -1.000000f, 0.000000f, -0.000001f,
			-7.499999f, -0.999999f, -0.000003f, 0.000000f, -1.000000f, -0.000000f, 0.690157f, 0.163450f, -1.000000f, 0.000000f, -0.000001f,
			-7.499999f, -0.999999f, -0.000003f, -0.000000f, 0.000000f, 1.000000f, 0.069468f, 0.007550f, -1.000000f, 0.000000f, 0.000000f,
			-8.499999f, -0.999999f, -0.000004f, -0.000000f, 0.000000f, 1.000000f, 0.102946f, 0.007550f, -1.000000f, 0.000000f, 0.000000f,
			-7.499999f, 2.500001f, -0.000003f, -0.000000f, 0.000000f, 1.000000f, 0.069468f, 0.130410f, -1.000000f, 0.000000f, 0.000000f,
			-8.499999f, 2.500001f, -0.000004f, -0.000000f, 0.000000f, 1.000000f, 0.102946f, 0.130410f, -1.000000f, 0.000000f, 0.000000f,
			-7.499998f, -0.999999f, -4.000003f, 1.000000f, 0.000000f, 0.000000f, 1.602788f, 1.000371f, 0.000000f, 0.000000f, -1.000000f,
			-7.499999f, -0.999999f, -0.000003f, 1.000000f, 0.000000f, 0.000000f, 0.006104f, 1.000371f, 0.000000f, 0.000000f, -1.000000f,
			-7.499998f, 2.500001f, -4.000003f, 1.000000f, 0.000000f, 0.000000f, 1.602789f, -0.332068f, 0.000000f, 0.000000f, -1.000000f,
			-7.499999f, 2.500001f, -0.000003f, 1.000000f, 0.000000f, 0.000000f, 0.006104f, -0.332068f, 0.000000f, 0.000000f, -1.000000f,
			-8.499998f, -0.999999f, -4.000004f, 0.000000f, 0.000000f, -1.000000f, 0.137429f, 0.130410f, -1.000000f, 0.000000f, 0.000000f,
			-7.499998f, -0.999999f, -4.000003f, 0.000000f, 0.000000f, -1.000000f, 0.103951f, 0.130410f, -1.000000f, 0.000000f, 0.000000f,
			-8.499998f, 2.500001f, -4.000004f, 0.000000f, 0.000000f, -1.000000f, 0.137429f, 0.007550f, -1.000000f, 0.000000f, 0.000000f,
			-7.499998f, 2.500001f, -4.000003f, 0.000000f, 0.000000f, -1.000000f, 0.103951f, 0.007550f, -1.000000f, 0.000000f, 0.000000f,
			-8.499999f, -0.999999f, -0.000004f, -1.000000f, 0.000000f, -0.000000f, 0.705139f, 0.375560f, 0.000000f, -1.000000f, 0.000000f,
			-8.499998f, -0.999999f, -4.000004f, -1.000000f, 0.000000f, -0.000000f, 0.705139f, 0.515972f, 0.000000f, -1.000000f, 0.000000f,
			-8.499999f, 2.500001f, -0.000004f, -1.000000f, 0.000000f, -0.000000f, 0.587965f, 0.375560f, 0.000000f, -1.000000f, 0.000000f,
			-8.499998f, 2.500001f, -4.000004f, -1.000000f, 0.000000f, -0.000000f, 0.587965f, 0.515972f, 0.000000f, -1.000000f, 0.000000f,
			9.750002f, 4.000001f, 0.000002f, 0.000000f, 0.000000f, -1.000000f, 3.465378f, -1.874993f, -1.000000f, 0.000000f, 0.000000f,
			6.750001f, 4.000001f, 0.000001f, 0.000000f, 0.000000f, -1.000000f, 5.273701f, -1.874993f, -1.000000f, 0.000000f, 0.000000f,
			9.750002f, 2.500001f, 0.000002f, 0.000000f, 0.000000f, -1.000000f, 3.465378f, -1.012678f, -1.000000f, 0.000000f, 0.000000f,
			6.750001f, 2.500001f, 0.000001f, 0.000000f, 0.000000f, -1.000000f, 5.273701f, -1.012677f, -1.000000f, 0.000000f, 0.000000f,
			4.000001f, -0.999999f, 0.000000f, 0.000000f, 0.000000f, -1.000000f, 6.931329f, 0.999391f, -1.000000f, 0.000000f, 0.000000f,
			4.000001f, 2.500001f, 0.000000f, 0.000000f, 0.000000f, -1.000000f, 6.931329f, -1.012677f, -1.000000f, 0.000000f, 0.000000f,
			15.500002f, 2.500001f, 0.000004f, 0.000000f, 0.000000f, -1.000000f, -0.000571f, -1.012678f, -1.000000f, 0.000000f, 0.000000f,
			15.500002f, -0.999999f, 0.000004f, 0.000000f, 0.000000f, -1.000000f, -0.000571f, 0.999390f, -1.000000f, 0.000000f, 0.000000f,
			-1.328913f, 2.500001f, -25.186893f, -0.000000f, 0.000000f, 1.000000f, -1.642241f, 1.006502f, 1.000000f, 0.000001f, 0.000000f,
			1.671088f, 2.500001f, -25.186893f, -0.000000f, 0.000000f, 1.000000f, -0.000246f, 1.006503f, 1.000000f, 0.000000f, 0.000000f,
			-1.328913f, -0.999999f, -25.186893f, -0.000000f, 0.000000f, 1.000000f, -1.642241f, 2.833504f, 1.000000f, 0.000000f, 0.000000f,
			8.671088f, -0.999999f, -25.186892f, -0.000000f, 0.000000f, 1.000000f, 3.831075f, 2.833505f, 1.000000f, 0.000000f, 0.000000f,
			8.671088f, 2.500001f, -25.186892f, -0.000000f, 0.000000f, 1.000000f, 3.831075f, 1.006504f, 1.000000f, 0.000000f, 0.000000f,
			12.000010f, 2.500001f, -25.186890f, -0.000000f, 0.000000f, 1.000000f, 5.653100f, 1.006504f, 1.000000f, 0.000000f, 0.000000f,
			12.000010f, 5.000001f, -25.186890f, -0.000000f, 0.000000f, 1.000000f, 5.653100f, -0.298497f, 1.000000f, 0.000000f, 0.000000f,
			1.671088f, 5.000001f, -25.186893f, -0.000000f, 0.000000f, 1.000000f, -0.000246f, -0.298498f, 1.000000f, 0.000000f, 0.000000f,
		};

		for (int i = 0; i < vertCnt; ++i)
		{
			const int v = i * 11;
			mesh.AddVertex(Vertex(
				{ verts[v], verts[v + 1], verts[v + 2] },
				{ verts[v + 3], verts[v + 4], verts[v + 5] },
				{ verts[v + 6], verts[v + 7] },
				{ verts[v + 8], verts[v + 9], verts[v + 10] }
			));
		}

		const char indicesCnt = 102;

		const unsigned char indices[indicesCnt] = {
			0, 1, 2,
			1, 3, 2,
			3, 4, 2,
			4, 5, 2,
			4, 6, 5,
			6, 7, 5,
			6, 8, 7,
			9, 5, 10,
			5, 7, 10,
			6, 4, 11,
			12, 13, 14,
			13, 15, 14,
			16, 17, 18,
			17, 19, 18,
			20, 21, 22,
			21, 23, 22,
			24, 25, 26,
			25, 27, 26,
			28, 29, 30,
			29, 31, 30,
			32, 33, 34,
			33, 35, 34,
			36, 37, 38,
			37, 39, 38,
			39, 40, 38,
			39, 41, 40,
			42, 38, 43,
			38, 40, 43,
			44, 45, 46,
			45, 47, 46,
			45, 48, 47,
			49, 48, 50,
			48, 51, 50,
			48, 45, 51
		};

		for (char i = 0; i < indicesCnt; i += 3)
		{
			mesh.AddFace(indices[i], indices[i + 1], indices[i + 2]);
		}
		
		auto mat = std::make_unique<Material>();

		mat->SetDiffuse(std::move(diffuse));
		mat->SetSpecular(std::move(specular));
		mat->SetNormal(std::move(normal));
		mat->SetRoughness(std::move(rough));
		mat->SetOcclusion(std::move(ao));

		mesh.AssignMaterial(std::move(mat));
		mesh.RegisterMesh();
		AddMesh(std::move(mesh));
		m_Mesh = m_Meshes.back().get();
	}

}
